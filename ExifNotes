#!/usr/bin/env python
import sys, os, glob, json, re

import ExifNotes
from ExifNotes import dry_run, path, extensions, exif_notes_extension, notes_separator, cs_file_name

def extend_command (list, key, tag):
    global command
    value = None
    if list :
        if key in list :
            value = list[key]
    else :
        value = key
    if value :
        value=re.sub('"', '\\"', str(value))
        command += ' "-' + tag + '=' + value + '"'

image_files = ExifNotes.get_image_files()
ExifNotes.print_verbose(image_files)
if len(image_files) == 0 :
    raise NameError('Cannot find any *' + extension + ' file')
exif_notes_file=glob.glob(path + '/*' + exif_notes_extension)
if len(exif_notes_file) == 0 :
    raise NameError('Cannot find any *' + exif_notes_extension + ' file')
if len(exif_notes_file) > 1 :
    raise NameError('Found ' + str(len(exif_notes_file)) + ' *' + exif_notes_extension + ' files, expected one')
exif_notes=json.load(open(exif_notes_file[0]))
ExifNotes.print_verbose(exif_notes)
if len(exif_notes['frames']) != len(image_files) :
    raise NameError('Number of ExifNote frames (' + str(len(exif_notes['frames'])) + ') does not match number of found ' + '*.'.join(str(extensions)) + ' files (' + str(len(image_files)) + ')')
if not 'artist' in exif_notes :
    exif_notes['artist'] = 'Cezary Å»emis'
if not 'copyright' in exif_notes :
    exif_notes['copyright'] = 'cezaryzemis.name'

i = 0
for frame in exif_notes['frames'] :
    command = ''
    if dry_run :
        command = 'echo '
    command += 'exiftool '
    if not ExifNotes.read_environ('SAFE') :
        command += " -overwrite_original -ignoreMinorErrors"
    if 'camera' in exif_notes :
        extend_command (exif_notes['camera'], 'make', 'Make')
        extend_command (exif_notes['camera'], 'model', 'Model')
        extend_command (exif_notes['camera'], 'serialNumber', 'CameraSerialNumber')
    if 'lens' in frame :
        extend_command (frame['lens'], 'make', 'LensMake')
        extend_command (frame['lens'], 'model', 'LensModel')
        extend_command (frame['lens'], 'serialNumber', 'LensSerialNumber')
    extend_command (frame, 'focalLength', 'FocalLength')
    extend_command (exif_notes, 'iso', 'ISO')
    extend_command (frame, 'date', 'DateTime')
    extend_command (frame, 'date', 'DateTimeOriginal')
    if 'shutter' in frame :
        et = re.sub('"', '', frame['shutter'])
        extend_command (None, et, 'ShutterSpeedValue')
        extend_command (None, et, 'ExposureTime')
    extend_command (frame, 'aperture', 'ApertureValue')
    extend_command (frame, 'aperture', 'FNumber')
    if 'exposureComp' in frame :
        extend_command (None, ExifNotes.fraction_to_float(frame['exposureComp']), 'ExposureCompensation')
    if 'location' in frame :
        extend_command (frame['location'], 'latitude', 'GPSLatitude')
        latitude_ref = None
        if frame['location']['latitude'] :
            if frame['location']['latitude'] > 0 :
                latitude_ref = 'N'
            else:
                latitude_ref = 'S'
        extend_command (None, latitude_ref, 'GPSLatitudeRef')
        extend_command (frame['location'], 'longitude', 'GPSLongitude')
        longiture_ref = None
        if frame['location']['longitude'] :
            if frame['location']['longitude'] > 0 :
                longitude_ref = 'E'
            else:
                longitude_ref = 'W'
        extend_command (None, longitude_ref, 'GPSLongitudeRef')
    extend_command (exif_notes, 'artist', 'Artist')
    extend_command (exif_notes, 'copyright', 'Copyright')
    notes=''
    if exif_notes['name'] :
        notes = 'Spool: ' + exif_notes['name'] + notes_separator
    if 'notes' in exif_notes :
        notes = 'SD: ' + exif_notes['note'] + notes_separator
    if 'notes' in frame : 
        notes += 'ID: ' + frame['note'] + notes_separator
    notes += 'Film: ' + exif_notes['filmStock']['make'] + " " + exif_notes['filmStock']['model']
    if 'filters' in frame :
        for filter in frame['filters'] :
            notes += notes_separator + 'Filter: ' + filter['make'] + " " + filter['model']
    extend_command (None, notes, 'ImageDescription')
    command += ' "' + image_files[i] + '"'
    os.system(command)
    i += 1
