#!/usr/bin/env python
import sys, os, glob, json, re

if os.environ.get('WORKING_DIR') :
    path=os.environ.get('WORKING_DIR')
else:
    path='.'
if os.environ.get('EXTENSION') :
    extension=os.environ.get('EXTENSION')
else:
    extension='.tif'
if os.environ.get('EXIF_NOTES_EXTENSION') :
    exif_notes_extension=os.environ.get('EXIF_NOTES_EXTENSION')
else:
    exif_notes_extension='.json'
if os.environ.get('NOTES_SEPARATOR') :
    notes_separator=os.environ.get('NOTES_SEPARATOR')
else:
    notes_separator=' | '

image_files=sorted([f for f in glob.glob(path + '/*' + extension) if not re.search('contact[_-]sheet', os.path.basename(f))])
if len(image_files) == 0 :
    raise NameError('Cannot find any *' + extension + ' file')
exif_notes_file=glob.glob(path + '/*' + exif_notes_extension)
if len(exif_notes_file) == 0 :
    raise NameError('Cannot find any *' + exif_notes_extension + ' file')
if len(exif_notes_file) > 1 :
    raise NameError('Found ' + str(len(exif_notes_file)) + ' *' + exif_notes_extension + ' files, expected one')
exif_notes=json.load(open(exif_notes_file[0]))
if len(exif_notes['frames']) != len(image_files) :
    raise NameError('Number of ExifNote frames (' + str(len(exif_notes['frames'])) + ') does not match number of found *' + extension + ' files (' + str(len(image_files)) + ')')
if not 'artist' in exif_notes :
    exif_notes['artist'] = 'Cezary Å»emis'
if not 'copyright' in exif_notes :
    exif_notes['copyright'] = 'cezaryzemis.name'

def extend_command (value, tag):
    global command
    if value :
        command += ' -' + tag + '="' + str(value) + '"'

i = 0
for frame in exif_notes['frames'] :
    command = ''
    if os.environ.get('DRYRUN') :
        command = 'echo '
    command += 'exiftool '
    if not os.environ.get('SAFE') :
        command += " -overwrite_original -ignoreMinorErrors"
    if 'camera' in frame :
        extend_command (exif_notes['camera']['make'], 'Make')
        extend_command (exif_notes['camera']['model'], 'Model')
        extend_command (exif_notes['camera']['serialNumber'], 'CameraSerialNumber')
    if 'lens' in frame :
        extend_command (frame['lens']['make'], 'LensMake')
        extend_command (frame['lens']['model'], 'LensModel')
        extend_command (frame['lens']['serialNumber'], 'LensSerialNumber')
    if 'focalLength' in frame :
        extend_command (frame['focalLength'], 'FocalLength')
    extend_command (exif_notes['iso'], 'ISO')
    extend_command (frame['date'], 'DateTime')
    extend_command (frame['date'], 'DateTimeOriginal')
    if 'shutter' in frame :
        extend_command (frame['shutter'], 'ShutterSpeedValue')
        extend_command (frame['shutter'], 'ExposureTime')
    if 'aperture' in frame:
        extend_command (frame['aperture'], 'ApertureValue')
        extend_command (frame['aperture'], 'FNumber')
    extend_command (frame['exposureComp'], 'ExposureCompensation')
    if 'location' in frame :
        extend_command (frame['location']['latitude'], 'GPSLatitude')
        latitude_ref = None
        if frame['location']['latitude'] :
            if frame['location']['latitude'] > 0 :
                latitude_ref = 'N'
            else:
                latitude_ref = 'S'
        extend_command (latitude_ref, 'GPSLatitudeRef')
        extend_command (frame['location']['longitude'], 'GPSLongitude')
        longiture_ref = None
        if frame['location']['longitude'] :
            if frame['location']['longitude'] > 0 :
                longitude_ref = 'E'
            else:
                longitude_ref = 'W'
        extend_command (longitude_ref, 'GPSLongitudeRef')
    extend_command (exif_notes['artist'], 'Artist')
    extend_command (exif_notes['copyright'], 'Copyright')
    notes=''
    if frame['note'] : 
        notes=frame['note'] + notes_separator
    notes += 'Film: ' + exif_notes['filmStock']['make'] + " " + exif_notes['filmStock']['model']
    if 'filters' in frame :
        for filter in frame['filters'] :
            notes += notes_separator + 'Filter: ' + filter['make'] + " " + filter['model']
    extend_command (notes, 'ImageDescription')
    command += " " + image_files[i]
    os.system(command)
    i += 1
