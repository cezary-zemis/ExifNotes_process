#!/usr/bin/env python
import sys, glob, PIL, math, piexif, pathlib, numpy
from PIL import Image, ImageDraw, ImageFont, ExifTags
from PIL.ExifTags import Base

import ExifNotes
from ExifNotes import dry_run, path, extensions, exif_notes_extension, notes_separator, cs_file_name

def scale_font_to_image(img, fn, text):
    fs = 333
    step = fs
    draw = ImageDraw.Draw(img)
    ExifNotes.print_verbose('img.width: ' + str(img.width) + ', img.height: ' + str(img.height)) 
    while step >= 1 :
        step = round(step / 2)
        draw.font = ImageFont.truetype(fn, fs)
        _, _, w, h = draw.textbbox((0, 0), text)
        ExifNotes.print_verbose('fs: ' + str(fs) + ', step: ' + str(step) + ', w: ' + str(w) + ', h: ' + str(h))
        if w > img.width or h > img.height :
            fs -= step
        else :
            fs += step
    _, _, w, h = draw.textbbox((0, 0), text)
    ExifNotes.print_verbose('fs: ' + str(fs) + ', step: ' + str(step) + ', w: ' + str(w) + ', h: ' + str(h))
    if w > img.width or h > img.height :
        fs -= 1
    ExifNotes.print_verbose('fs: ' + str(fs))
    if fs < min_font_size :
        fs = min_font_size
    return fs
     
resolution = int(ExifNotes.read_environ('RESOLUTION', 300))
pwidth = int(ExifNotes.inches (ExifNotes.read_environ('PAPER_WIDTH', 210 - 10)) * resolution)
pheight = int(ExifNotes.inches (ExifNotes.read_environ('PAPER_HEIGHT', 297 - 10)) * resolution)
margin_left = int(ExifNotes.inches(ExifNotes.read_environ('MARGIN_LEFT', 0)) * resolution)
margin_right = int(ExifNotes.inches(ExifNotes.read_environ('MARGIN_RIGTH', 0)) * resolution)
margin_top = int(ExifNotes.inches(ExifNotes.read_environ('MARGIN_TOP', 0)) * resolution)
margin_bottom = int(ExifNotes.inches(ExifNotes.read_environ('MARGIN_BOTTOM', 0)) * resolution)
header_heigth = int(ExifNotes.inches(ExifNotes.read_environ('HEADER_HEIGTH', 10)) * resolution)
text_box_heigth = int(ExifNotes.inches(ExifNotes.read_environ('TEXT_BOX_HEIGTH', 12)) * resolution)
padding_horizontal = int(ExifNotes.inches(ExifNotes.read_environ('PADDING_HORIZONTAL', 5)) * resolution)
padding_vertical = int(ExifNotes.inches(ExifNotes.read_environ('PADDING_VERTICAL', 1)) * resolution)
padding_text_box = int(ExifNotes.inches(ExifNotes.read_environ('PADDING_TEXT_BOX', 1)) * resolution)
padding_header = int(ExifNotes.inches(ExifNotes.read_environ('PADDING_HEADER', 3)) * resolution)
font_name = ExifNotes.read_environ('FONT_NAME', 'DejaVuSans.ttf')
min_font_size = int(ExifNotes.read_environ('MIN_FONT_SIZE', 14))

film_sizes={
    '66':  (3, 4),
    '645': (4, 4),
    '67':  (2, 4),
    '69':  (2, 4),
    'ff':  (6, 7),
    '45':  (2, 2),
    '57':  (1, 2),
    '810': (1, 1)
}

if not sys.argv[1]:
    raise NameError('Parameter(s) missing')
if sys.argv[1] in film_sizes:
    cs_format=film_sizes[sys.argv[1]]
else:
    if not sys.argv[2]:
        raise NameError(sys.rgv[1] + 'not found in defined film sizes, two parameters expected: <colums> <rows>')
    cs_format=(int(sys.argv[1]), int(sys.argv[2]))
if cs_format[0] < 1 or cs_format[1] < 1 :
    raise NameError("contact sheet format must contain two positive values: <colums> <rows>, got" + cs_format)

image_files = ExifNotes.get_image_files()
if len(image_files) < 1 :
    raise NameError("Cannot find any image file")

box_width = pwidth - margin_left - margin_right
box_height = pheight - margin_top - margin_bottom
pages = math.ceil(len(image_files) / (cs_format[0] * cs_format[1]))
ibwidth = int((box_width - (cs_format[0] - 1) * padding_horizontal) / cs_format[0])
ibheight = int((box_height - header_heigth - padding_header - (cs_format[1] - 1) * padding_vertical) / cs_format[1] - padding_text_box - text_box_heigth)

descs=[]
font_size=666
for count in range(len(image_files)):
    exif_dict = piexif.load(image_files[count])
    exif_data = exif_dict['0th'] | exif_dict['Exif']
    ExifNotes.print_verbose('count: ' + str(count ) + '   ---------------------------------------------')
    for k, v in exif_data.items():
        ExifNotes.print_verbose(ExifTags.TAGS[k] + ': ' + str(ExifNotes.read_exif(exif_data, ExifTags.TAGS[k])) + '; data type: ' + str(type(ExifNotes.read_exif(exif_data, ExifTags.TAGS[k]))))
    
    descs.append([])
    descs[count].append(pathlib.Path(image_files[count]).stem + " " + ExifNotes.read_exif(exif_data, 'DateTimeOriginal'))
    fn = ExifNotes.read_exif (exif_data, 'FNumber')
    if type(fn) is tuple :
        fn = int(fn[0]) / int(fn[1])
        if fn < 1.2 :
            fn = round(fn, 2)
        elif fn < 10 :
            fn = round (fn, 1)
        else :
            fn = round (fn)
        fn = 'f/' + str(fn)
    et = ExifNotes.read_exif (exif_data, 'ExposureTime')
    if type(et) is tuple :
        et = et[0] / et[1]
        if et >=1 :
            if et > 10 :
                et = round(et)
            else :
                et = round(et, 1)
            et = str(et) + 's'
        else :
            et = '1/' + str(round(1 / et)) + 's'
    ec = ExifNotes.read_exif(exif_data, 'ExposureBiasValue')
    if ec and ec[0] > 0:
        ec = ' ' + ExifNotes.nice_signed_fraction(ec[0] / ec[1]) + 'EV'
    else:
        ec = ''
    descs[count].append(ExifNotes.read_exif (exif_data, 'LensMake') + " " + ExifNotes.read_exif (exif_data, 'LensModel') + " " + fn + " " + et + ec)
    filters = ExifNotes.read_description(ExifNotes.read_exif(exif_data, 'ImageDescription'), 'Filter')
    if len(filters) > 0 :
        descs[count].append('F: ' + '; '.join(filters))
    id=ExifNotes.read_description(ExifNotes.read_exif(exif_data, 'ImageDescription'), 'ID')
    if len(id) > 0 :
        descs[count].append('\n'.join(id))

    tb = Image.new('RGB', (ibwidth, text_box_heigth), (0, 0, 0))
    fs = scale_font_to_image(tb, font_name, '\n'.join(descs[count]))
    if fs < font_size:
        font_size = fs

exif_dict = piexif.load(image_files[0])
exif_data = exif_dict['0th'] | exif_dict['Exif']
cmk = ExifNotes.read_exif (exif_data, 'Make')
cmd = ExifNotes.read_exif (exif_data, 'Model')
iso = ExifNotes.read_exif (exif_data, 'ISOSpeedRatings')
film = ExifNotes.read_description(ExifNotes.read_exif(exif_data, 'ImageDescription'), 'Film')
header = []
if len(film) > 0 :
    film = film[0]
else:
    film = ''
spool = ExifNotes.read_description(ExifNotes.read_exif(exif_data, 'ImageDescription'), 'Spool')
if len(spool) > 0 :
    spool = spool[0] + ': '
else:
    spool = ''
header.append (spool + film + ', EI: ' + str(iso))
header.append (cmk + ' ' + cmd)
sd = ExifNotes.read_description(ExifNotes.read_exif(exif_data, 'ImageDescription'), 'SD')
if len(sd) > 0 :
    header += sd
hb = Image.new('RGB', (box_width, header_heigth), (255, 255, 255))
hbd = ImageDraw.Draw(hb)
hbd.font = ImageFont.truetype(font_name, scale_font_to_image(hb, font_name, '\n'.join(header)))
hbd.text((0, 0), '\n'.join(header), (0, 0, 0))

count=0    
for page in range(pages):
    irow = 0
    icol = 0
    cs = Image.new('RGB', (pwidth, pheight), (255, 255, 255))

    cs.paste (hb, (margin_left, margin_top))
    for irow in range(cs_format[1]):
        for icol in range(cs_format[0]):
            try:
                img = Image.open(image_files[count])
            except:
                break
            if img.mode == 'I;16' :
                img = Image.fromarray((numpy.array(img).astype(numpy.uint16) / 256).astype(numpy.uint8))
            img = img.convert(mode='RGB')
            img.thumbnail((ibwidth, ibheight))
            cs.paste(img , 
            (
                margin_left + icol * (ibwidth + padding_horizontal) + int((ibwidth - img.width) / 2), 
                margin_top + header_heigth + padding_header + irow * (ibheight + text_box_heigth + padding_text_box + padding_vertical) + int((ibheight - img.height) / 2)  
            ))

            tb = Image.new('RGB', (ibwidth, text_box_heigth), (255, 255, 255))
            tbd = ImageDraw.Draw(tb)
            tbd.font = ImageFont.truetype(font_name, font_size)
            _, _, w, _ = tbd.textbbox ((0, 0), '\n'.join(descs[count]))
            tbd.text((round((ibwidth - w) / 2), 0), '\n'.join(descs[count]), (0, 0, 0))
            cs.paste(tb, 
            (
                margin_left + icol * (ibwidth + padding_horizontal), 
                margin_top + header_heigth + padding_header + irow * (ibheight + text_box_heigth + padding_text_box + padding_vertical) + ibheight + padding_text_box
            ))
            count += 1
    cs.save(path + '/' + "{:02d}".format(page) + cs_file_name)
